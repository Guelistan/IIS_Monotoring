AppManager - IIS Monitoring & Management System
===================================================

STATUS: Vollstandig funktionsfahig (Stand: 14.09.2025)
NEUESTE VERSION: v2.2 - Navigation UX + Button Styling

PROJEKT UBERSICHT
-----------------
ASP.NET Core 8.0 Webanwendung fur IIS Application Pool Management
Self-contained Deployment erfolgreich implementiert
Direkte Microsoft.Web.Administration Integration
Pistazien-grunes Design mit schwarzen Button-Randern + roten Schatten
Dedizierte IISManager-Seite mit CPU-Monitoring

WARUM ASYNC UND AWAIT?
----------------------
In der IISService.cs Klasse wurden alle Methoden als async implementiert und verwenden await,
um die Performance und Responsivitat der Webanwendung zu gewahrleisten:

- IIS-Operationen (ServerManager API) sind synchron und blockierend
- Ohne async wurden diese Operationen den Haupt-Thread blockieren
- Dies wurde die gesamte Web-App fur andere Benutzer unresponsiv machen
- Task.Run() verschiebt blockierende IIS-Arbeiten in Background-Threads
- Await wartet auf Ergebnisse ohne Thread-Blockierung
- Resultat: Skalierbare, performante Web-App mit besserer Benutzererfahrung

TECHNISCHE ARCHITEKTUR
----------------------
- Services/AppService.cs: Vereinfacht auf ~200 Zeilen
- Direkte ServerManager Integration
- Exception Handling fur UnauthorizedAccessException
- Automatische IIS Setup Skripte

SICHERHEIT & BERECHTIGUNGEN
---------------------------
- Application Pool lauft mit LocalSystem
- IIS_IUSRS Berechtigungen gesetzt
- Anonyme Authentifizierung aktiviert
- Foreign Key Constraints deaktiviert

FEATURES IMPLEMENTIERT
----------------------
- IIS Application Pool Monitoring
- Start/Stop/Recycle Funktionen
- App-Owner Berechtigungen System
- SQLite Datenbank Integration
- Admin Dashboard
- Benutzer- und Rollenverwaltung
- Launch History Tracking

SETUP ANLEITUNG
---------------
1. Self-contained Publish bereits erledigt
2. IIS Setup Skript bereits ausgefuhrt
3. Website lauft unter: http://localhost:85
4. Admin Login verfugbar

PERFORMANCE OPTIMIERUNGEN
-------------------------
- Vereinfachung der Architektur
- Entfernung komplexer Windows Service Komponenten
- Direkte IIS API Integration
- Optimierte Exception Handling

TROUBLESHOOTING
---------------
- HTTP 500.19 (Konfigurationsfehler) behoben
- HTTP 401.3 (Berechtigungsfehler) behoben
- HTTP 401.2 (Authentifizierung) behoben
- SQLite Foreign Key Constraints deaktiviert
- Port-Konflikte (85) behoben

ENTWICKLUNGSHISTORIE
--------------------
- Phase 1: Komplexe Windows Service Architektur
- Phase 2: Vereinfachung auf direkte IIS Integration
- Phase 3: Self-contained Deployment
- Phase 4: IIS Berechtigungen und Authentifizierung
- Phase 5: SQLite Optimierung
- Phase 6: Pistazien-grunes UI Design
- Phase 7: IISManager-Seite mit CPU Monitoring
- Phase 8: Navigation UX Verbesserungen

NEUE FEATURES (v2.2)
--------------------
- Dashboard: ReadOnly Ubersicht + Navigation Hub
- ApplicationManagement: Windows Apps Verwaltung + IIS Weiterleitung
- IISManager: Dedizierte AppPool-Verwaltung mit CPU-Monitoring
- Button Styling: Schwarze Rander (2px solid #000) + Rote Schatten
- CPU Monitoring: PerformanceCounter Integration
- Peak-Zeit Analyse: Tageszeit-basierte CPU-Trend-Berechnung
- Auto-Refresh: Automatische CPU-Wert-Aktualisierung

NAVIGATION STRUKTUR
-------------------
Dashboard (Ubersicht)
├── Windows Apps → ApplicationManagement
│   ├── Windows Apps: Start/Stop/Restart (lokale Kontrolle)
│   └── IIS Apps: "IIS Manager" Button (Weiterleitung)
└── IIS AppPools → IISManager
    ├── AppPool Start/Stop/Recycle
    ├── Echtzeit CPU-Monitoring
    ├── Peak-Zeit Analyse (Morgen/Mittag/Abend/Nacht)
    └── CPU-Trend Berechnung mit Variation

WICHTIGE ERKENNTNISSE
---------------------
- Vereinfachung war Schlussel zum Erfolg
- Self-contained Deployment ideal fur IIS
- LocalSystem Identity notwendig fur IIS Management
- Foreign Key Deaktivierung verbessert Stabilitaet
- Async/Await entscheidend fur Performance

DEPLOYMENT BEFEHLE
------------------
# Self-contained Publish:
dotnet publish --configuration Release --self-contained true --runtime win-x64 --output "C:\Users\silav\Desktop\iismanager"
dotnet publish -c Release -r win-x64 --self-contained true -o "C:\Users\silav\Desktop\puplish"

# IIS Setup:
Setup-IIS-Permissions.bat (bereits ausgefuhrt)

# Website URL:
http://localhost:85

===================================================
© 2025 AppManager - IIS Monitoring System
<<<<<<< HEAD
Entwickelt fur sichere und effiziente IIS Verwaltung
===================================================
=======
Entwickelt für sichere und effiziente IIS Verwaltung
==================================================
Im Verzeichnis Appmanager und allen Unterordnern Leserechte für den Anwendungspool-Benutzer hinzufügen
Beispiel (PowerShell als Administrator):


icacls "c:\guelistan\Dersler\Appmanager" /grant "IIS_IUSRS:(OI)(CI)RX" /T
>>>>>>> 1e808df
