AppManager - Projektinformation

Letzte Aktualisierung: 27. Juli 2025
Status: Entwicklungsfunktionen integriert; UI-Verbesserungen für App-Owner in Arbeit

1. Übersicht
AppManager ist eine ASP.NET Core Razor Pages-Anwendung (.NET 8) zur Verwaltung von lokalen Programmen und IIS-Anwendungen mit rollenbasiertem Zugriff, Protokollierung von Änderungen und Verwaltungsseiten.

2. Hauptfunktionen
- Anwendungsverwaltung: starten, stoppen, neu starten von Desktop-Programmen
- IIS-Integration: Auflisten von Websites, Anwendungen und Anwendungs-Pools; Starten/Stoppen/Neu_Starten von App-Pools
- App-Owner-Modell: Benutzer bestimmten Anwendungen zuweisen, die sie steuern können
- Protokollierung: Dokumentation von Aktionen (Start, Stopp, Neustart, Recycling, Besitzänderungen)
- CPU-Überwachung: pro Prozess und pro IIS-App-Pool (nur Windows)

3. Technologiestack
- Framework: ASP.NET Core 8, Razor Pages
- Authentifizierung/Autorisierung: ASP.NET Core Identity mit Rollen (Admin, SuperAdmin)
- Datenzugriff: Entity Framework Core
- Datenbank: konfiguriert über DefaultConnection (lokale Entwicklung oder Server)
- IIS-Verwaltung: Microsoft.Web.Administration

4. Sicherheitsmodell
- Globale Administratoren: AppUser.IsGlobalAdmin = true (voller Zugriff)
- App-Besitzer: Einträge in AppOwnership gewähren Zugriff auf genau eine Anwendung
- Seiten geschützt durch [Authorize] und Rollenprüfungen; Aktionen validieren zusätzlich den Besitz

5. Wichtige Datenmodelle
Anwendung
- Id (Guid), Name, Beschreibung, AusführungsPfad, ProzessId
- IstGestartet, NeustartErforderlich, Argumente, ArbeitsVerzeichnis
- IIS-Integration: IISAppPoolName, IISSiteName, IstIISAnwendung

AppOwnership
- Id, BenutzerId, AnwendungsId, WindowsBenutzerName, IISAppPoolName
- ErstelltAm, ErstelltVon; Navigation zu AppUser und Application

AppLaunchHistory
- Id, AnwendungsId, BenutzerId, Aktion, StartZeit, Grund

6. IIS-Integrationsverhalten
- Bei Laden der App-Owner-Seite werden IIS-Anwendungen und App-Pools entdeckt
- Fehlende IIS-Apps/App-Pools werden in die Anwendungstabelle zur Auswahl synchronisiert
- Die Benutzeroberfläche zur Eigentümerzuweisung bietet eine Suche nach IIS-Anwendungen und eine vollständige App-Pool-Liste

7. CPU-Überwachung
- Desktop-Apps: CPU-Messung über ProzessId mittels PerformanceCounter
- IIS-Apps: CPU auf alle Worker-Prozesse des ausgewählten App-Pools aggregiert
- Erfordert Windows; Warnungen CA1416 sind zu erwarten und sind unter Windows sicher

8. Erstellen und Ausführen (Entwicklung)
- dotnet build
- dotnet run --launch-profile http
- URL: http://localhost:5130

9. Veröffentlichen (Windows, einschließlich)
Beispiel:
- dotnet publish .\AppManager.csproj -c Release -r win-x64 --self-contained true -o "C:\Deploy\AppManager"

10. IIS-Bereitstellungsnotizen
- Erstellen Sie eine Website oder Anwendung in IIS, die auf den Veröffentlichungsordner verweist
- Anwendungs-Pool: Kein verwalteter Code, 64-Bit aktivieren, wenn win-x64 angestrebt wird
- ASP.NET Core Hosting Bundle auf dem Server installieren
- Gewähren Sie IIS_IUSRS/AppPool-Identität Lesezugriff auf den Ordner; Schreibzugriff auf Protokolle, falls erforderlich
- Stellen Sie sicher, dass die Prozessidentität Berechtigungen zum Lesen der IIS-Konfiguration hat, um Websites/App-Pools aufzulisten

11. Bekannte Hinweise
- Windows-exklusive APIs (PerformanceCounter, Microsoft.Web.Administration) werden verwendet; Der Server muss Windows sein
- Clients können über den Browser von jedem Betriebssystem aus zugreifen, wenn die Site erreichbar ist

12. Repository
- Hauptzweig: main
- Remote: https://github.com/Guelistan/IIS_Monotoring