# AppManager IIS Setup Script
# F√ºhrt das komplette Setup f√ºr die AppManager-Anwendung auf IIS durch

param(
    [string]$SiteName = "AppManager",
    [string]$AppPoolName = "AppManagerPool",
    [string]$PhysicalPath = "C:\Users\silav\Desktop\iismanager",
    [int]$Port = 80,
    [string]$Protocol = "http",
    [switch]$EnableHttps = $false,
    [int]$HttpsPort = 443
)

# Pr√ºfen ob Administrator
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Error "‚ùå Dieses Skript muss als Administrator ausgef√ºhrt werden!"
    exit 1
}

Write-Host "üöÄ AppManager IIS Setup wird gestartet..." -ForegroundColor Green
Write-Host "   Site Name: $SiteName" -ForegroundColor Cyan
Write-Host "   App Pool: $AppPoolName" -ForegroundColor Cyan
Write-Host "   Pfad: $PhysicalPath" -ForegroundColor Cyan
Write-Host "   Port: $Port" -ForegroundColor Cyan

try {
    # IIS-Features aktivieren
    Write-Host "üì¶ IIS-Features werden aktiviert..." -ForegroundColor Yellow
    
    $features = @(
        "IIS-WebServerRole",
        "IIS-WebServer",
        "IIS-CommonHttpFeatures",
        "IIS-HttpErrors",
        "IIS-HttpLogging",
        "IIS-Security",
        "IIS-WindowsAuthentication",
        "IIS-RequestFiltering",
        "IIS-NetFxExtensibility45",
        "IIS-ISAPIExtensions",
        "IIS-ISAPIFilter",
        "IIS-AspNet45",
        "IIS-ASPNET45"
    )
    
    foreach ($feature in $features) {
        try {
            Enable-WindowsOptionalFeature -Online -FeatureName $feature -All -NoRestart
            Write-Host "   ‚úÖ $feature aktiviert" -ForegroundColor Green
        }
        catch {
            Write-Host "   ‚ö†Ô∏è $feature bereits aktiviert oder nicht verf√ºgbar" -ForegroundColor Yellow
        }
    }

    # ASP.NET Core Hosting Bundle pr√ºfen
    Write-Host "üîç ASP.NET Core Hosting Bundle wird gepr√ºft..." -ForegroundColor Yellow
    $hostingBundle = Get-ItemProperty "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Updates\.NET Core*" -ErrorAction SilentlyContinue
    if (-not $hostingBundle) {
        Write-Host "‚ö†Ô∏è ASP.NET Core Hosting Bundle nicht gefunden!" -ForegroundColor Yellow
        Write-Host "   Bitte herunterladen von: https://dotnet.microsoft.com/download/dotnet/8.0" -ForegroundColor Cyan
        Write-Host "   Nach der Installation IIS neu starten!" -ForegroundColor Red
    } else {
        Write-Host "   ‚úÖ ASP.NET Core Hosting Bundle gefunden" -ForegroundColor Green
    }

    # WebAdministration Modul laden
    Import-Module WebAdministration -ErrorAction Stop
    Write-Host "‚úÖ WebAdministration Modul geladen" -ForegroundColor Green

    # Application Pool erstellen
    Write-Host "üèä Application Pool wird erstellt..." -ForegroundColor Yellow
    if (Get-IISAppPool -Name $AppPoolName -ErrorAction SilentlyContinue) {
        Write-Host "   ‚ö†Ô∏è AppPool '$AppPoolName' existiert bereits, wird neu konfiguriert..." -ForegroundColor Yellow
        Remove-WebAppPool -Name $AppPoolName -ErrorAction SilentlyContinue
    }
    
    New-WebAppPool -Name $AppPoolName
    Set-ItemProperty -Path "IIS:\AppPools\$AppPoolName" -Name "managedRuntimeVersion" -Value ""
    Set-ItemProperty -Path "IIS:\AppPools\$AppPoolName" -Name "startMode" -Value "AlwaysRunning"
    Set-ItemProperty -Path "IIS:\AppPools\$AppPoolName" -Name "processModel.identityType" -Value "ApplicationPoolIdentity"
    Set-ItemProperty -Path "IIS:\AppPools\$AppPoolName" -Name "processModel.idleTimeout" -Value "00:00:00"
    Set-ItemProperty -Path "IIS:\AppPools\$AppPoolName" -Name "recycling.periodicRestart.time" -Value "00:00:00"
    
    Write-Host "   ‚úÖ Application Pool '$AppPoolName' erstellt und konfiguriert" -ForegroundColor Green

    # Verzeichnis erstellen
    Write-Host "üìÅ Verzeichnisse werden erstellt..." -ForegroundColor Yellow
    if (-not (Test-Path $PhysicalPath)) {
        New-Item -ItemType Directory -Path $PhysicalPath -Force
        Write-Host "   ‚úÖ Verzeichnis '$PhysicalPath' erstellt" -ForegroundColor Green
    } else {
        Write-Host "   ‚ÑπÔ∏è Verzeichnis '$PhysicalPath' existiert bereits" -ForegroundColor Cyan
    }

    # Unterverzeichnisse erstellen
    $subDirs = @("logs", "App_Data", "wwwroot")
    foreach ($subDir in $subDirs) {
        $fullPath = Join-Path $PhysicalPath $subDir
        if (-not (Test-Path $fullPath)) {
            New-Item -ItemType Directory -Path $fullPath -Force
            Write-Host "   ‚úÖ Unterverzeichnis '$subDir' erstellt" -ForegroundColor Green
        }
    }

    # Website erstellen
    Write-Host "üåê Website wird erstellt..." -ForegroundColor Yellow
    if (Get-Website -Name $SiteName -ErrorAction SilentlyContinue) {
        Write-Host "   ‚ö†Ô∏è Website '$SiteName' existiert bereits, wird entfernt..." -ForegroundColor Yellow
        Remove-Website -Name $SiteName
    }
    
    New-Website -Name $SiteName -PhysicalPath $PhysicalPath -ApplicationPool $AppPoolName -Port $Port
    Write-Host "   ‚úÖ Website '$SiteName' erstellt" -ForegroundColor Green

    # HTTPS Binding hinzuf√ºgen (falls gew√ºnscht)
    if ($EnableHttps) {
        Write-Host "üîí HTTPS Binding wird hinzugef√ºgt..." -ForegroundColor Yellow
        New-WebBinding -Name $SiteName -Protocol "https" -Port $HttpsPort
        Write-Host "   ‚úÖ HTTPS Binding auf Port $HttpsPort hinzugef√ºgt" -ForegroundColor Green
        Write-Host "   ‚ö†Ô∏è SSL-Zertifikat muss manuell konfiguriert werden!" -ForegroundColor Yellow
    }

    # Windows Authentication aktivieren
    Write-Host "üîê Windows Authentication wird aktiviert..." -ForegroundColor Yellow
    Set-WebConfigurationProperty -Filter "/system.webServer/security/authentication/windowsAuthentication" -Name "enabled" -Value "True" -PSPath "IIS:\" -Location "$SiteName"
    Set-WebConfigurationProperty -Filter "/system.webServer/security/authentication/anonymousAuthentication" -Name "enabled" -Value "False" -PSPath "IIS:\" -Location "$SiteName"
    Write-Host "   ‚úÖ Windows Authentication aktiviert" -ForegroundColor Green

    # NTFS-Berechtigungen setzen
    Write-Host "üîë NTFS-Berechtigungen werden gesetzt..." -ForegroundColor Yellow
    
    # IIS_IUSRS Vollzugriff
    $acl = Get-Acl $PhysicalPath
    $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS_IUSRS", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
    $acl.SetAccessRule($accessRule)
    Set-Acl -Path $PhysicalPath -AclObject $acl
    Write-Host "   ‚úÖ IIS_IUSRS Vollzugriff gesetzt" -ForegroundColor Green
    
    # Application Pool Identity Vollzugriff
    $appPoolIdentity = "IIS AppPool\$AppPoolName"
    $accessRule2 = New-Object System.Security.AccessControl.FileSystemAccessRule($appPoolIdentity, "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
    $acl.SetAccessRule($accessRule2)
    Set-Acl -Path $PhysicalPath -AclObject $acl
    Write-Host "   ‚úÖ Application Pool Identity Vollzugriff gesetzt" -ForegroundColor Green

    # Request Filtering konfigurieren
    Write-Host "üìä Request Filtering wird konfiguriert..." -ForegroundColor Yellow
    Set-WebConfigurationProperty -Filter "/system.webServer/security/requestFiltering/requestLimits" -Name "maxAllowedContentLength" -Value 52428800 -PSPath "IIS:\" -Location "$SiteName"
    Write-Host "   ‚úÖ Max Request Size auf 50MB gesetzt" -ForegroundColor Green

    # Application Pool starten
    Write-Host "‚ñ∂Ô∏è Application Pool wird gestartet..." -ForegroundColor Yellow
    Start-WebAppPool -Name $AppPoolName
    Write-Host "   ‚úÖ Application Pool '$AppPoolName' gestartet" -ForegroundColor Green

    # Website starten
    Write-Host "üåê Website wird gestartet..." -ForegroundColor Yellow
    Start-Website -Name $SiteName
    Write-Host "   ‚úÖ Website '$SiteName' gestartet" -ForegroundColor Green

    # Abschluss
    Write-Host ""
    Write-Host "üéâ AppManager IIS Setup erfolgreich abgeschlossen!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìã Zusammenfassung:" -ForegroundColor Cyan
    Write-Host "   Website: $SiteName" -ForegroundColor White
    Write-Host "   URL: http://localhost:$Port" -ForegroundColor White
    if ($EnableHttps) {
        Write-Host "   HTTPS URL: https://localhost:$HttpsPort" -ForegroundColor White
    }
    Write-Host "   App Pool: $AppPoolName" -ForegroundColor White
    Write-Host "   Pfad: $PhysicalPath" -ForegroundColor White
    Write-Host ""
    Write-Host "üìù N√§chste Schritte:" -ForegroundColor Yellow
    Write-Host "   1. AppManager mit 'dotnet publish -p:PublishProfile=IIS-Production' ver√∂ffentlichen"
    Write-Host "   2. Bei Bedarf SSL-Zertifikat f√ºr HTTPS konfigurieren"
    Write-Host "   3. Firewall-Regeln f√ºr Port $Port (und $HttpsPort bei HTTPS) erstellen"
    Write-Host "   4. DNS/Host-Eintr√§ge konfigurieren falls n√∂tig"
    Write-Host ""

} catch {
    Write-Error "‚ùå Fehler beim IIS Setup: $_"
    Write-Host "Stacktrace:" -ForegroundColor Red
    Write-Host $_.ScriptStackTrace -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Setup abgeschlossen! AppManager ist bereit f√ºr das Deployment." -ForegroundColor Green