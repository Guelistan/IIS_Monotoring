@page "/iismanager"
@model AppManager.Pages.IISManagerModel
@{
    ViewData["Title"] = "üöÄ IIS AppPool Manager";
}

<div class="container-fluid">
    <!-- üìä Header Stats -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header text-center">
                    <h2 class="mb-0">üöÄ IIS AppPool Manager</h2>
                    <small class="text-muted">Echtzeit√ºberwachung & Management</small>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-md-3">
                            <h3 class="text-success">@Model.AppPools.Count(p => p.State == "Started")</h3>
                            <small>‚úÖ Laufende Pools</small>
                        </div>
                        <div class="col-md-3">
                            <h3 class="text-danger">@Model.AppPools.Count(p => p.State == "Stopped")</h3>
                            <small>‚ùå Gestoppte Pools</small>
                        </div>
                        <div class="col-md-3">
                            <h3 class="text-warning">@Model.GetHighCpuPoolsCount()</h3>
                            <small>‚ö†Ô∏è Hohe CPU Last</small>
                        </div>
                        <div class="col-md-3">
                            <h3 class="text-info">@Model.AppPools.Count</h3>
                            <small>üìä Gesamt Pools</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- üîÑ Auto-Refresh Controls -->
    <div class="row mb-3">
        <div class="col-12 text-center">
            <button class="btn btn-action btn-start" onclick="location.reload()">üîÑ Aktualisieren</button>
            <button class="btn btn-action" id="autoRefreshBtn" onclick="toggleAutoRefresh()">‚è±Ô∏è Auto-Refresh</button>
            <span class="badge badge-running" id="refreshStatus">Manuell</span>
        </div>
    </div>

    <!-- üìã AppPool Management Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">üèä‚Äç‚ôÇÔ∏è Application Pools</h4>
                    <small class="text-muted">CPU-Auslastung & Zeitanalyse</small>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>üè∑Ô∏è Pool Name</th>
                                    <th>üìä Status</th>
                                    <th>üíª CPU Auslastung</th>
                                    <th>‚è∞ Peak Zeit</th>
                                    <th>üìà Trend (24h)</th>
                                    <th>üéõÔ∏è Aktionen</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var pool in Model.AppPools.OrderBy(p => p.Name))
                                {
                                    var cpuUsage = Model.GetAppPoolCpuUsage(pool.Name);
                                    var peakTime = Model.GetPeakTime(pool.Name);
                                    var cpuClass = cpuUsage < 30 ? "cpu-low" : cpuUsage < 70 ? "cpu-medium" : "cpu-high";
                                    
                                    <tr class="@(pool.State == "Started" ? "" : "table-secondary")">
                                        <td>
                                            <strong>@pool.Name</strong>
                                            @if (pool.ProcessId > 0)
                                            {
                                                <br><small class="text-muted">PID: @pool.ProcessId</small>
                                            }
                                        </td>
                                        <td>
                                            @if (pool.State == "Started")
                                            {
                                                <span class="badge badge-running">‚úÖ L√§uft</span>
                                            }
                                            else
                                            {
                                                <span class="badge badge-stopped">‚ùå Gestoppt</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="cpu-usage-bar">
                                                <div class="cpu-usage-fill @cpuClass" style="width: @(cpuUsage)%">
                                                    <span style="position: absolute; left: 10px; top: 3px; font-weight: bold; color: white; font-size: 0.8rem;">
                                                        @cpuUsage.ToString("F1")%
                                                    </span>
                                                </div>
                                            </div>
                                            @if (cpuUsage > 80)
                                            {
                                                <small class="text-danger">üî• Kritisch hoch!</small>
                                            }
                                            else if (cpuUsage > 60)
                                            {
                                                <small class="text-warning">‚ö†Ô∏è Erh√∂ht</small>
                                            }
                                        </td>
                                        <td>
                                            <strong>@peakTime</strong>
                                            <br><small class="text-muted">@Model.GetPeakDescription(pool.Name)</small>
                                        </td>
                                        <td>
                                            @{
                                                var trend = Model.GetCpuTrend(pool.Name);
                                            }
                                            @if (trend > 0)
                                            {
                                                <span class="text-danger">üìà +@trend.ToString("F1")%</span>
                                            }
                                            else if (trend < 0)
                                            {
                                                <span class="text-success">üìâ @trend.ToString("F1")%</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">‚û°Ô∏è Stabil</span>
                                            }
                                        </td>
                                        <td>
                                            @if (pool.State == "Started")
                                            {
                                                <button class="btn btn-action btn-stop btn-sm" onclick="performAction('@pool.Name', 'stop')">
                                                    üõë Stop
                                                </button>
                                                <button class="btn btn-action btn-recycle btn-sm" onclick="performAction('@pool.Name', 'recycle')">
                                                    üîÑ Recycle
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-action btn-start btn-sm" onclick="performAction('@pool.Name', 'start')">
                                                    ‚ñ∂Ô∏è Start
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- üìä CPU Timeline Chart -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">üìà CPU Auslastung Timeline (24h)</h4>
                    <small class="text-muted">Erkennung von Peak-Zeiten</small>
                </div>
                <div class="card-body">
                    <canvas id="cpuChart" width="400" height="100"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// üîÑ Auto-Refresh Funktionalit√§t
let autoRefreshInterval = null;

function toggleAutoRefresh() {
    const btn = document.getElementById('autoRefreshBtn');
    const status = document.getElementById('refreshStatus');
    
    if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
        autoRefreshInterval = null;
        btn.textContent = '‚è±Ô∏è Auto-Refresh';
        status.textContent = 'Manuell';
        status.className = 'badge badge-stopped';
    } else {
        autoRefreshInterval = setInterval(() => {
            location.reload();
        }, 30000); // 30 Sekunden
        btn.textContent = '‚èπÔ∏è Stop Auto-Refresh';
        status.textContent = 'Aktiv (30s)';
        status.className = 'badge badge-running';
    }
}

// üéØ AppPool Aktionen
async function performAction(poolName, action) {
    const btn = event.target;
    const originalText = btn.textContent;
    btn.disabled = true;
    btn.textContent = '‚è≥ Verarbeitung...';
    
    try {
        const response = await fetch(`/IISManager?handler=${action}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: `poolName=${encodeURIComponent(poolName)}`
        });
        
        if (response.ok) {
            location.reload();
        } else {
            alert('‚ùå Fehler bei der Ausf√ºhrung!');
        }
    } catch (error) {
        alert('‚ùå Netzwerkfehler: ' + error.message);
    } finally {
        btn.disabled = false;
        btn.textContent = originalText;
    }
}

// üìä CPU Chart Initialisierung
document.addEventListener('DOMContentLoaded', function() {
    // Chart.js wird hier implementiert f√ºr die Timeline
    console.log('üé® Pistazien-Gr√ºn Theme geladen!');
});
</script>

<style>
/* üé® Spezifische Styles f√ºr die IIS Manager Seite */
.table-hover tbody tr:hover {
    background-color: rgba(147, 197, 160, 0.1);
}

.cpu-usage-bar {
    margin: 5px 0;
    box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
}

.btn-action:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
}

/* Glowing Effect f√ºr laufende Badges ohne Keyframes */
.badge-running {
    box-shadow: 0 0 8px rgba(40, 167, 69, 0.5);
    transition: box-shadow 0.3s ease;
}

.badge-running:hover {
    box-shadow: 0 0 15px rgba(40, 167, 69, 0.8);
}
</style>