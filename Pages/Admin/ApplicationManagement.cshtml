@page
@model AppManager.Pages.Admin.ApplicationManagementModel
@using AppManager.Models
@{
    ViewData["Title"] = "Anwendungsverwaltung";
}

<!-- √úberschrift mit IIS-Status-Indikator -->
<h1>Anwendungsverwaltung
    <!-- Zeigt den IIS-Status als Badge an -->
    @if (Model.IisAvailable)
    {
        <span class="badge bg-success ms-3">
            <!-- Gr√ºnes Icon f√ºr verf√ºgbaren IIS -->
            <svg ...></svg>
            IIS Verf√ºgbar
        </span>
    }
    else if (!string.IsNullOrEmpty(Model.IisErrorMessage))
    {
        <span class="badge bg-warning text-dark ms-3">
            <!-- Gelbes Icon bei IIS-Problem -->
            <svg ...></svg>
            IIS Problem
        </span>
    }
    else
    {
        <span class="badge bg-secondary ms-3">
            <!-- Graues Icon bei unbekanntem Status -->
            <svg ...></svg>
            IIS Status unbekannt
        </span>
    }
</h1>

<!-- Erfolgsmeldung anzeigen, falls vorhanden -->
@if (TempData["SuccessMessage"] != null)
{
<div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

<!-- Fehlermeldung anzeigen, falls vorhanden -->
@if (TempData["ErrorMessage"] != null)
{
<div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

<!-- Detaillierte Erfolgsmeldung mit Icon und Schlie√üen-Button -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <svg ...></svg>
        <strong>Erfolgreich:</strong> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Detaillierte Fehlermeldung mit Ursachen und L√∂sungsvorschl√§gen -->
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <svg ...></svg>
        <strong>Fehler:</strong> @TempData["ErrorMessage"]
        
        <!-- Zus√§tzliche Hinweise bei bestimmten Fehlern -->
        @if (TempData["ErrorMessage"].ToString().Contains("Objektkennung") || TempData["ErrorMessage"].ToString().Contains("0x800710D8"))
        {
            <hr class="my-2">
            <small class="d-block">
                <strong>üí° M√∂gliche Ursachen:</strong><br>
                ‚Ä¢ Der AppPool existiert nicht mehr im IIS<br>
                ‚Ä¢ IIS-Dienste (W3SVC/WAS) sind gestoppt<br>
                ‚Ä¢ Keine Administratorrechte f√ºr IIS-Operationen
            </small>
        }
        
        @if (TempData["ErrorMessage"].ToString().Contains("Der Dienst wurde nicht gestartet") || TempData["ErrorMessage"].ToString().Contains("0x80070426"))
        {
            <hr class="my-2">
            <small class="d-block">
                <strong>üîß L√∂sungsvorschlag:</strong><br>
                IIS-Dienste neu starten: <code>iisreset</code> als Administrator ausf√ºhren
            </small>
        }
        
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Warnung bei IIS-Verbindungsproblemen mit L√∂sungsvorschl√§gen -->
@if (!string.IsNullOrEmpty(Model.IisErrorMessage))
{
    <div class="alert alert-warning d-flex align-items-center" role="alert">
        <div class="flex-shrink-0">
            <svg ...></svg>
        </div>
        <div class="flex-grow-1 ms-3">
            <h6 class="alert-heading">IIS-Verbindungsproblem</h6>
            <p class="mb-2">@Model.IisErrorMessage</p>
            <!-- L√∂sungsvorschl√§ge je nach Fehlertyp -->
            @if (Model.IisErrorMessage.Contains("Berechtigung") || Model.IisErrorMessage.Contains("Administrator"))
            {
                <div class="small">
                    <strong>üí° L√∂sungsvorschl√§ge:</strong>
                    <ul class="mb-0 mt-1">
                        <li>Starten Sie Visual Studio oder die Anwendung als Administrator</li>
                        <li>Pr√ºfen Sie, ob IIS korrekt installiert ist</li>
                        <li>Kontaktieren Sie Ihren Systemadministrator f√ºr erweiterte Berechtigungen</li>
                    </ul>
                </div>
            }
            else if (Model.IisErrorMessage.Contains("redirection.config") || Model.IisErrorMessage.Contains("Konfiguration"))
            {
                <div class="small">
                    <strong>üí° L√∂sungsvorschl√§ge:</strong>
                    <ul class="mb-0 mt-1">
                        <li>IIS-Konfiguration √ºberpr√ºfen: <code>inetmgr</code> als Administrator ausf√ºhren</li>
                        <li>IIS-Rolle in Windows Features pr√ºfen</li>
                        <li>Anwendung mit erh√∂hten Rechten starten</li>
                    </ul>
                </div>
            }
            <hr class="my-2">
            <p class="mb-0 small">
                <em>Hinweis: Die Anwendungsverwaltung funktioniert weiterhin f√ºr normale Windows-Anwendungen.</em>
            </p>
        </div>
    </div>
}

<!-- Formular zum Hinzuf√ºgen einer neuen Anwendung -->
<form method="post" asp-page-handler="Add">
    <div class="form-row">
        <!-- Name der Anwendung -->
        <div class="form-group col-md-4">
            <label asp-for="NewApplication.Name">Name</label>
            <input asp-for="NewApplication.Name" class="form-control" />
            <span asp-validation-for="NewApplication.Name" class="text-danger"></span>
        </div>
        <!-- IIS AppPool Name -->
        <div class="form-group col-md-4">
            <label asp-for="NewApplication.IISAppPoolName">IIS AppPool Name</label>
            <input asp-for="NewApplication.IISAppPoolName" class="form-control" />
        </div>
        <!-- Checkbox f√ºr IIS-Anwendung -->
        <div class="form-group col-md-2">
            <label asp-for="NewApplication.IsIISApplication">IIS?</label>
            <input asp-for="NewApplication.IsIISApplication" type="checkbox" class="form-control" />
        </div>
        <!-- Hinzuf√ºgen-Button -->
        <div class="form-group col-md-2 align-self-end">
            <button type="submit" class="btn btn-primary">Hinzuf√ºgen</button>
        </div>
    </div>
    <!-- Verstecktes Feld f√ºr den Pfad -->
    <input type="hidden" asp-for="NewApplication.ExecutablePath" />
</form>

<hr />

<!-- Tabelle mit allen Anwendungen -->
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Status</th>
            <th>Letzter Start</th>
            <th>Aktionen</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var app in Model.Applications)
        {
        <tr>
            <!-- Name und ggf. Owner-Badge -->
            <td style="width:45%">
                @app.Name
                @if (Model.CanManage(app.Id))
                {
                    <span class="badge bg-success ml-2">Du bist Owner</span>
                }
                <br />
                <small class="text-muted">@app.IISAppPoolName</small>
            </td>
            <!-- Statusanzeige (gestartet/gestoppt) -->
            <td style="width:10%">
                @if (app.IsStarted)
                {
                    <span class="text-success">Gestartet</span>
                }
                else
                {
                    <span class="text-danger">Gestoppt</span>
                }
            </td>
            <!-- Zeitpunkt des letzten Starts -->
            <td style="width:15%">@app.LastLaunchTime.ToString("g")</td>
            <!-- Steuerungsaktionen (Start/Stop/Restart) oder IIS Manager -->
            <td style="width:20%">
                @if (Model.CanManage(app.Id))
                {
                    @if (app.IsIISApplication)
                    {
                        <!-- IIS-Anwendungen: Link zum IIS Manager -->
                        <div class="btn-group btn-group-sm" role="group">
                            <span class="badge bg-info me-2">IIS App</span>
                            <a asp-page="/IISManager" class="btn btn-primary btn-sm" title="Im IIS Manager verwalten">
                                üöÄ IIS Manager
                            </a>
                        </div>
                    }
                    else
                    {
                        <!-- Lokale Steuerung f√ºr normale Anwendungen -->
                        <form method="post" asp-page-handler="Start" style="display:inline">
                            <input type="hidden" name="applicationId" value="@app.Id" />
                            <button type="submit" class="btn btn-success btn-sm" title="Starten">‚ñ∂Ô∏è</button>
                        </form>
                        <form method="post" asp-page-handler="Stop" style="display:inline">
                            <input type="hidden" name="applicationId" value="@app.Id" />
                            <button type="submit" class="btn btn-warning btn-sm" title="Stoppen">‚èπÔ∏è</button>
                        </form>
                        <form method="post" asp-page-handler="Restart" style="display:inline">
                            <input type="hidden" name="applicationId" value="@app.Id" />
                            <button type="submit" class="btn btn-secondary btn-sm" title="Reboot">üîÅ</button>
                        </form>
                    }
                }
                else
                {
                    <!-- Aktionen deaktiviert, falls keine Berechtigung -->
                    @if (app.IsIISApplication)
                    {
                        <span class="badge bg-secondary">Keine IIS-Berechtigung</span>
                    }
                    else
                    {
                        <button class="btn btn-success btn-sm" disabled title="Starten">‚ñ∂Ô∏è</button>
                        <button class="btn btn-warning btn-sm" disabled title="Stoppen">‚èπÔ∏è</button>
                        <button class="btn btn-secondary btn-sm" disabled title="Reboot">üîÅ</button>
                    }
                }
            </td>

            <!-- Owner-Zuweisung und CPU-Chart -->
            <td style="width:20%">
                <!-- Owner-Zuweisung nur f√ºr globale Admins -->
                @if (Model.CurrentUserIsGlobalAdmin)
                {
                    <form method="post" asp-page-handler="AddOwner" class="form-inline">
                        <input type="hidden" name="OwnerApplicationId" value="@app.Id" />
                        <select name="OwnerUserId" class="form-control form-control-sm mr-1">
                            <option value="">‚Äî w√§hlen ‚Äî</option>
                            @foreach (var u in Model.Users)
                            {
                                <option value="@u.Id">@u.Vorname @u.Nachname (@u.UserName)</option>
                            }
                        </select>
                        <button type="submit" class="btn btn-outline-primary btn-sm">Assign</button>
                    </form>
                }

                <!-- CPU-Auslastung als Chart anzeigen -->
                <div class="mt-2">
                    <canvas id="cpuChart-@app.Id" data-appid="@app.Id" width="120" height="80"></canvas>
                </div>
            </td>
        </tr>
        }
    </tbody>
</table>

<!-- Chart.js f√ºr CPU-Auslastung einbinden -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Zeichnet f√ºr jede Anwendung einen CPU-Chart
    (function(){
        try{
            var loads = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.CpuLoads));
            var names = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AppPoolNames));
            // F√ºr jedes Canvas-Element den passenden Wert anzeigen
            document.querySelectorAll('canvas[id^="cpuChart-"]').forEach(function(canvas){
                var appId = canvas.dataset.appid;
                // Platzhalterwert, falls keine Daten vorhanden
                var ctx = canvas.getContext('2d');
                var val = 0;
                // Zuordnung per Index (vereinfachte Logik)
                var idx = 0;
                if (loads && loads.length>0){ idx = 0; val = loads[idx]; }
                new Chart(ctx, {
                    type: 'doughnut',
                    data: { datasets: [{ data: [val, 100-val], backgroundColor: ['#4caf50','#e0e0e0'] }], labels: ['CPU','Rest']},
                    options: { responsive: false, cutout: '70%', plugins: { legend: { display: false } }, elements: { center: { } } }
                });
            });
        } catch(e){ console.debug(e); }
    })();
</script>