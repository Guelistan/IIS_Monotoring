@page
@model AppManager.Pages.Admin.ApplicationManagementModel
@using AppManager.Models
@{
    ViewData["Title"] = "Anwendungsverwaltung";
}

<h1>Anwendungsverwaltung
    <!-- IIS-Status-Indikator -->
    @if (Model.IisAvailable)
    {
        <span class="badge bg-success ms-3">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle-fill me-1" viewBox="0 0 16 16">
                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.061L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
            </svg>
            IIS Verf√ºgbar
        </span>
    }
    else if (!string.IsNullOrEmpty(Model.IisErrorMessage))
    {
        <span class="badge bg-warning text-dark ms-3">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-triangle-fill me-1" viewBox="0 0 16 16">
                <path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"/>
            </svg>
            IIS Problem
        </span>
    }
    else
    {
        <span class="badge bg-secondary ms-3">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-circle-fill me-1" viewBox="0 0 16 16">
                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.496 6.033h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286a.237.237 0 0 0 .241.247zm2.325 6.443c.61 0 1.029-.394 1.029-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94 0 .533.425.927 1.01.927z"/>
            </svg>
            IIS Status unbekannt
        </span>
    }
</h1>

<!-- Erfolgsmeldung -->
@if (TempData["SuccessMessage"] != null)
{
<div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

<!-- Fehlermeldung -->
@if (TempData["ErrorMessage"] != null)
{
<div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

<!-- TempData-Nachrichten anzeigen -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle-fill me-2" viewBox="0 0 16 16">
            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.061L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
        </svg>
        <strong>Erfolgreich:</strong> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-triangle-fill me-2" viewBox="0 0 16 16">
            <path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"/>
        </svg>
        <strong>Fehler:</strong> @TempData["ErrorMessage"]
        
        @if (TempData["ErrorMessage"].ToString().Contains("Objektkennung") || TempData["ErrorMessage"].ToString().Contains("0x800710D8"))
        {
            <hr class="my-2">
            <small class="d-block">
                <strong>üí° M√∂gliche Ursachen:</strong><br>
                ‚Ä¢ Der AppPool existiert nicht mehr im IIS<br>
                ‚Ä¢ IIS-Dienste (W3SVC/WAS) sind gestoppt<br>
                ‚Ä¢ Keine Administratorrechte f√ºr IIS-Operationen
            </small>
        }
        
        @if (TempData["ErrorMessage"].ToString().Contains("Der Dienst wurde nicht gestartet") || TempData["ErrorMessage"].ToString().Contains("0x80070426"))
        {
            <hr class="my-2">
            <small class="d-block">
                <strong>üîß L√∂sungsvorschlag:</strong><br>
                IIS-Dienste neu starten: <code>iisreset</code> als Administrator ausf√ºhren
            </small>
        }
        
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (!string.IsNullOrEmpty(Model.IisErrorMessage))
{
    <div class="alert alert-warning d-flex align-items-center" role="alert">
        <div class="flex-shrink-0">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16">
                <path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"/>
                <path d="M9.05 9.435c-.018-.36-.218-.558-.579-.558-.361 0-.56.198-.578.558l-.048 2.022c-.01.23.153.397.393.397.24 0 .402-.167.393-.397l-.048-2.022zM8.507 12.90c-.266 0-.482.227-.482.494 0 .267.216.494.482.494.267 0 .484-.227.484-.494 0-.267-.217-.494-.484-.494z"/>
            </svg>
        </div>
        <div class="flex-grow-1 ms-3">
            <h6 class="alert-heading">IIS-Verbindungsproblem</h6>
            <p class="mb-2">@Model.IisErrorMessage</p>
            @if (Model.IisErrorMessage.Contains("Berechtigung") || Model.IisErrorMessage.Contains("Administrator"))
            {
                <div class="small">
                    <strong>üí° L√∂sungsvorschl√§ge:</strong>
                    <ul class="mb-0 mt-1">
                        <li>Starten Sie Visual Studio oder die Anwendung als Administrator</li>
                        <li>Pr√ºfen Sie, ob IIS korrekt installiert ist</li>
                        <li>Kontaktieren Sie Ihren Systemadministrator f√ºr erweiterte Berechtigungen</li>
                    </ul>
                </div>
            }
            else if (Model.IisErrorMessage.Contains("redirection.config") || Model.IisErrorMessage.Contains("Konfiguration"))
            {
                <div class="small">
                    <strong>üí° L√∂sungsvorschl√§ge:</strong>
                    <ul class="mb-0 mt-1">
                        <li>IIS-Konfiguration √ºberpr√ºfen: <code>inetmgr</code> als Administrator ausf√ºhren</li>
                        <li>IIS-Rolle in Windows Features pr√ºfen</li>
                        <li>Anwendung mit erh√∂hten Rechten starten</li>
                    </ul>
                </div>
            }
            <hr class="my-2">
            <p class="mb-0 small">
                <em>Hinweis: Die Anwendungsverwaltung funktioniert weiterhin f√ºr normale Windows-Anwendungen.</em>
            </p>
        </div>
    </div>
}

<!-- Neue Anwendung hinzuf√ºgen -->
<div class="card mb-4">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">
            <i class="bi bi-plus-circle"></i> Neue Anwendung hinzuf√ºgen
        </h5>
    </div>
    <div class="card-body">
        <form method="post" asp-page-handler="Add">
            <div class="row g-3">
                <div class="col-md-5">
                    <label asp-for="BindNewApplication.Name" class="form-label">Name der Anwendung *</label>
                    <input asp-for="BindNewApplication.Name" class="form-control" placeholder="z.B. Production Website" required />
                    <span asp-validation-for="BindNewApplication.Name" class="text-danger"></span>
                </div>
                <div class="col-md-5">
                    <label asp-for="BindNewApplication.IISAppPoolName" class="form-label">IIS AppPool Name *</label>
                    <input asp-for="BindNewApplication.IISAppPoolName" class="form-control" placeholder="z.B. DefaultAppPool" required />
                    <small class="form-text text-muted">Exakter Name wie in IIS angezeigt</small>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Typ</label>
                    <div class="form-check form-switch">
                        <input asp-for="BindNewApplication.IsIISApplication" class="form-check-input" type="checkbox" role="switch" id="isIISSwitch" checked />
                        <label class="form-check-label" for="isIISSwitch">
                            <strong>IIS AppPool</strong>
                        </label>
                    </div>
                    <small class="form-text text-muted">Nur IIS-Apps werden unterst√ºtzt</small>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-plus-lg"></i> Hinzuf√ºgen
                    </button>
                    <button type="reset" class="btn btn-outline-secondary">
                        <i class="bi bi-x-lg"></i> Zur√ºcksetzen
                    </button>
                </div>
            </div>
            <input type="hidden" asp-for="BindNewApplication.ExecutablePath" value="" />
        </form>
    </div>
</div>

<hr />

<!-- Liste der Anwendungen -->
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Status</th>
            <th>Letzter Start</th>
            <th>Aktionen</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var app in Model.Applications)
        {
        <tr>
            <td style="width:45%">
                @app.Name
                @if (Model.CanManage(app.Id))
                {
                    <span class="badge bg-success ml-2">Du bist Owner</span>
                }
                <br />
                <small class="text-muted">@app.IISAppPoolName</small>
            </td>
            <td style="width:10%">
                @if (app.IsStarted)
                {
                    <span class="text-success">Gestartet</span>
                }
                else
                {
                    <span class="text-danger">Gestoppt</span>
                }
            </td>
            <td style="width:15%">@app.LastLaunchTime.ToString("g")</td>
            <td style="width:20%">
                @if (Model.CanManage(app.Id))
                {
                    <form method="post" asp-page-handler="Start" style="display:inline">
                        <input type="hidden" name="applicationId" value="@app.Id" />
                        <button type="submit" class="btn btn-success btn-sm" title="Starten">‚ñ∂Ô∏è</button>
                    </form>
                    <form method="post" asp-page-handler="Stop" style="display:inline">
                        <input type="hidden" name="applicationId" value="@app.Id" />
                        <button type="submit" class="btn btn-warning btn-sm" title="Stoppen">‚èπÔ∏è</button>
                    </form>
                    <form method="post" asp-page-handler="Restart" style="display:inline">
                        <input type="hidden" name="applicationId" value="@app.Id" />
                        <button type="submit" class="btn btn-secondary btn-sm" title="Reboot">üîÅ</button>
                    </form>
                }
                else
                {
                    <!-- Nicht berechtigt: nur Status anzeigen (Buttons disabled) -->
                    <button class="btn btn-success btn-sm" disabled title="Starten">‚ñ∂Ô∏è</button>
                    <button class="btn btn-warning btn-sm" disabled title="Stoppen">‚èπÔ∏è</button>
                    <button class="btn btn-secondary btn-sm" disabled title="Reboot">üîÅ</button>
                }
                @if (app.IsIISApplication && !string.IsNullOrWhiteSpace(app.IISAppPoolName))
                {
                    if (Model.CanManage(app.Id))
                    {
                        <form method="post" asp-page-handler="Recycle" style="display:inline">
                            <input type="hidden" name="applicationId" value="@app.Id" />
                            <button type="submit" class="btn btn-info btn-sm" title="AppPool recyceln">‚ôªÔ∏è</button>
                        </form>
                    }
                    else
                    {
                        <button class="btn btn-info btn-sm" disabled title="AppPool recyceln">‚ôªÔ∏è</button>
                    }
                }
            </td>

            <td style="width:20%">
                <!-- Owner assignment (visible only to global admins) -->
                @if (Model.CurrentUserIsGlobalAdmin)
                {
                    <form method="post" asp-page-handler="AddOwner" class="form-inline">
                        <input type="hidden" name="OwnerApplicationId" value="@app.Id" />
                        <select name="OwnerUserId" class="form-control form-control-sm mr-1">
                            <option value="">‚Äî w√§hlen ‚Äî</option>
                            @foreach (var u in Model.Users)
                            {
                                <option value="@u.Id">@u.Vorname @u.Nachname (@u.UserName)</option>
                            }
                        </select>
                        <button type="submit" class="btn btn-outline-primary btn-sm">Assign</button>
                    </form>
                }

                <!-- CPU chart (right side) -->
                <div class="mt-2">
                    <canvas id="cpuChart-@app.Id" data-appid="@app.Id" data-apppool="@app.IISAppPoolName" width="120" height="80"></canvas>
                </div>
            </td>
        </tr>
        }
    </tbody>
</table>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Render CPU loads per AppPool: match canvas data-apppool to Model.AppPoolNames
    (function(){
        try{
            var loads = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.CpuLoads));
            var names = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AppPoolNames));
            document.querySelectorAll('canvas[id^="cpuChart-"]').forEach(function(canvas){
                var appPool = canvas.dataset.apppool || '';
                var ctx = canvas.getContext('2d');
                var val = 0;
                if (appPool && Array.isArray(names)){
                    var idx = names.indexOf(appPool);
                    if (idx >= 0 && Array.isArray(loads) && loads.length > idx){
                        val = Number(loads[idx]) || 0;
                    }
                }
                new Chart(ctx, {
                    type: 'doughnut',
                    data: { datasets: [{ data: [val, 100-val], backgroundColor: ['#4caf50','#e0e0e0'] }], labels: ['CPU','Rest']},
                    options: { responsive: false, cutout: '70%', plugins: { legend: { display: false } } }
                });
            });
        } catch(e){ console.debug(e); }
    })();
</script>